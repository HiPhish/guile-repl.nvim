######################
# The :Guile command #
######################

Before (Store old info binary so it can be restored):
  let g:guile_repl['binary'] = 'sh test/mock-guile.sh'


Execute (No arguments opens a default prompt):
  silent Guile

Then (A terminal buffer with settings set):
  AssertEqual g:guile_repl.syntax, &syntax
  AssertEqual g:guile_repl.binary, b:guile_repl.instance.binary
  AssertEqual g:guile_repl.title, b:term_title
  AssertEqual g:guile_repl.args, b:guile_repl.instance.args
  Assert exists('b:guile_repl')
  AssertEqual b:guile_repl.instance, g:guile_repl.instances[0]
  quit


Execute (User-supplied arguments):
  silent Guile foo bar

Then (Arugments are appended to defaults):
  AssertEqual b:guile_repl.instance.args, g:guile_repl.args + ['foo', 'bar']


Execute (Tab-local settings override global ones):
  let t:guile_repl = {'title': 'Alternative title'}
  silent Guile

Then (The title is different from the default):
  AssertEqual b:term_title, t:guile_repl['title']
  quit


Execute (One Instance is spawned):
  silent Guile

Then (The instance is kept track of):
  AssertEqual 1, len(g:guile_repl.instances)
  AssertEqual b:guile_repl.instance, g:guile_repl.instances[0]
  quit
  AssertEqual 0, len(g:guile_repl.instances)


Execute (Try spawning two REPLs without bang):
  silent Guile
  silent Guile

Then (There is only one instance):
  AssertEqual 1, len(g:guile_repl.instances)
  quit


Execute (Try spawning two REPLs with bang):
  silent Guile
  silent Guile!

Then (There are two instances):
  AssertEqual 2, len(g:guile_repl.instances)
  quit
  quit


Execute (More than one instance is spawned):
  silent Guile
  silent Guile!

Then (First two, then one, then no instance):
  AssertEqual 2, len(g:guile_repl.instances)
  AssertEqual b:guile_repl.instance, g:guile_repl.instances[0]
  quit
  AssertEqual 1, len(g:guile_repl.instances)
  AssertEqual b:guile_repl.instance, g:guile_repl.instances[0]
  quit
  AssertEqual 0, len(g:guile_repl.instances)


Execute (Pass arguments to the REPL):
  let t:guile_repl = {'args': ['foo', 'bar']}
  silent Guile baz

Then (Arguments have been split into a list):
  AssertEqual ['foo', 'bar', 'baz'], b:guile_repl.instance.args
  quit
